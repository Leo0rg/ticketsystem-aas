import { Bot } from "grammy";
import { MyContext } from "../index";
import { prisma } from "../services/prisma";
import bcrypt from "bcryptjs";

/**
 * –ö–æ–º–∞–Ω–¥–∞ /start
 */
export function startCommand(bot: Bot<MyContext>) {
  bot.command("start", async (ctx) => {
    const firstName = ctx.from?.first_name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    const telegramId = ctx.from?.id.toString();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const startPayload = ctx.message?.text.split(" ")[1];
    
    if (startPayload && startPayload.startsWith("auth_") && telegramId) {
      const token = startPayload.substring(5); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ "auth_"
      await handleAuthToken(ctx, token, telegramId);
      return;
    }
    
    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã\n\n–Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—è–≤–æ–∫.\n\n` +
      `–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
      `/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n` +
      `/tickets - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞—è–≤–∫–∏\n\n` +
      `–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`
    );
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function handleAuthToken(ctx: MyContext, token: string, telegramId: string) {
  try {
    // –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const authToken = await prisma.telegramAuthToken.findFirst({
      where: {
        token,
        isUsed: false,
        expires: {
          gt: new Date(), // –¢–æ–∫–µ–Ω –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫
        },
      },
    });
    
    if (!authToken) {
      await ctx.reply("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegramId
    const existingUserWithTelegram = await prisma.user.findFirst({
      where: { telegramId },
    });
    
    if (existingUserWithTelegram) {
      // –ï—Å–ª–∏ —ç—Ç–æ—Ç Telegram —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
      await ctx.reply("‚ùå –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç Telegram —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–æ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é.");
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–∏–º –º—ã –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è
    if (authToken.email) {
      // –í—Ö–æ–¥ - —Å–≤—è–∑—ã–≤–∞–µ–º Telegram ID —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
      const user = await prisma.user.findUnique({
        where: { email: authToken.email },
      });
      
      if (!user) {
        await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è—è telegramId
      await prisma.user.update({
        where: { id: user.id },
        data: { telegramId },
      });
      
      await ctx.reply(
        `‚úÖ –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º ${user.email}!\n\n` +
        `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏.`
      );
    } else {
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
      const randomPassword = Math.random().toString(36).slice(-10);
      const passwordHash = await bcrypt.hash(randomPassword, 10);
      
      const username = ctx.from?.username || `user_${Math.floor(Math.random() * 10000)}`;
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.create({
        data: {
          name: ctx.from?.first_name,
          email: `${username}@telegram.user`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email
          passwordHash,
          telegramId,
        },
      });
      
      await ctx.reply(
        `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ –∑–∞—è–≤–æ–∫!\n\n` +
        `–í–∞—à email –¥–ª—è –≤—Ö–æ–¥–∞: ${user.email}\n` +
        `–í–∞—à –ø–∞—Ä–æ–ª—å: ${randomPassword}`
      );
    }
    
    // –û—Ç–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await prisma.telegramAuthToken.update({
      where: { id: authToken.id },
      data: { isUsed: true },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
} 