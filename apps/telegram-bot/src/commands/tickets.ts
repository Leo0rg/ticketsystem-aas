import { Bot, InlineKeyboard } from "grammy";
import { prisma } from "../services/prisma";
import { MyContext } from "../index";

/**
 * –ö–æ–º–∞–Ω–¥–∞ /tickets
 */
export function ticketsCommand(bot: Bot<MyContext>) {
  bot.command("tickets", async (ctx) => {
    const telegramId = ctx.from?.id.toString();
    
    if (!telegramId) {
      await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID");
      return;
    }
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
      const user = await prisma.user.findFirst({
        where: { telegramId },
      });
      
      if (!user) {
        await ctx.reply(
          `–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ <a href="${process.env.TELEGRAM_WEB_VIEW_URL}">–≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ web-view</a>`,
          { parse_mode: "HTML" }
        );
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const tickets = await prisma.ticket.findMany({
        where: { userId: user.id },
        orderBy: { createdAt: "desc" },
        take: 5, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      });
      
      if (tickets.length === 0) {
        await ctx.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞—è–≤–∫–∞–º–∏
      const keyboard = new InlineKeyboard();
      
      tickets.forEach((ticket) => {
        const statusEmoji = getStatusEmoji(ticket.status);
        keyboard.text(
          `${statusEmoji} ${ticket.title.substring(0, 30)}...`,
          `ticket_${ticket.id}`
        ).row();
      });
      
      await ctx.reply("–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:", {
        reply_markup: keyboard,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏
  bot.callbackQuery(/^ticket_(.+)$/, async (ctx) => {
    const ticketId = ctx.match[1];
    
    try {
      const ticket = await prisma.ticket.findUnique({
        where: { id: ticketId },
        include: { comments: true },
      });
      
      if (!ticket) {
        await ctx.answerCallbackQuery("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        return;
      }
      
      const statusEmoji = getStatusEmoji(ticket.status);
      const priorityEmoji = getPriorityEmoji(ticket.priority);
      
      let message = `üìù <b>–ó–∞—è–≤–∫–∞ #${ticket.id.substring(0, 8)}</b>\n\n` +
        `<b>–°—Ç–∞—Ç—É—Å:</b> ${statusEmoji} ${ticket.status}\n` +
        `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${priorityEmoji} ${ticket.priority}\n` +
        `<b>–°–æ–∑–¥–∞–Ω–∞:</b> ${formatDate(ticket.createdAt)}\n\n` +
        `<b>–¢–µ–º–∞:</b> ${ticket.title}\n\n` +
        `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${ticket.description}\n\n`;
      
      if (ticket.comments.length > 0) {
        message += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b>\n";
        ticket.comments.slice(-3).forEach((comment) => {
          message += `- ${formatDate(comment.createdAt)}: ${comment.text}\n`;
        });
      }
      
      await ctx.answerCallbackQuery();
      await ctx.reply(message, {
        parse_mode: "HTML",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", error);
      await ctx.answerCallbackQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏");
    }
  });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
 */
function getStatusEmoji(status: string): string {
  switch (status) {
    case "PENDING": return "‚è≥";
    case "IN_PROGRESS": return "üîÑ";
    case "RESOLVED": return "‚úÖ";
    case "CANCELED": return "‚ùå";
    default: return "‚ùì";
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞—è–≤–∫–∏
 */
function getPriorityEmoji(priority: string): string {
  switch (priority) {
    case "LOW": return "üü¢";
    case "MEDIUM": return "üü°";
    case "HIGH": return "üü†";
    case "URGENT": return "üî¥";
    default: return "‚ö™";
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É
 */
function formatDate(date: Date): string {
  return new Date(date).toLocaleDateString("ru-RU", {
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  });
} 